agot_become_a_knight_effect = {
	if = {
		limit = {
			has_trait = squire
		}
		add_trait_xp = {
			trait = squire
			track = knight
			value = 100
		}
	} else_if = {
		limit = {
			NOT = {
				has_trait = squire
			}
		}
		add_trait = squire
		add_trait_xp = {
			trait = squire
			track = knight
			value = 100
		}
	}

	#Notify close family of your becoming of a knight
	save_scope_as = my_relation
	if = {
		limit = {
			any_close_family_member = {
				exists = yes
			}
		}
		every_close_family_member = {
			limit = {
				opinion = {
					target = scope:my_relation
					value >= 10 #Minimum of 10 opinion here. Can increase or decrease if too spammy.
				}
			}
			trigger_event = {
				id = agot_knighthood.0320
				days = 1
			}
		}
	}

	#SOTM
	if = {
		limit = {
			exists = dynasty
			dynasty = dynasty:dynn_Dayne
		}
		dynasty.dynast = {
			trigger_event = {
				id = agot_valyrian_steel.0001
				days = 1
			}
		}
	}
}

agot_add_become_a_knight_prestige_effect = {
	du_knight_tree_se = { ACTOR = $KNIGHT_MAKER$ RECIPIENT = $KNIGHT_TO_BE$ }
	add_prestige = {
		#value = 25 # AGOT REVIEW: See how the higher values feel
		value = 50
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					exists = $KNIGHT_MAKER$.dynasty
					$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 3 } #Noteworthy
				}
			}
			add = 25
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					exists = $KNIGHT_MAKER$.dynasty
					OR = {
						$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 4 } #Reputatbable
						$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 5 } #Well-known
					}
				}
			}
			add = 50
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					exists = $KNIGHT_MAKER$.dynasty
					OR = {
						$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 6 } #Significant
						$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 7 } #Famous
					}
				}
			}
			add = 100
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					exists = $KNIGHT_MAKER$.dynasty
					OR = {
						$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 8 } #Glorious
						$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 9 } #Fabled
					}
				}
			}
			add = 150
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					exists = $KNIGHT_MAKER$.dynasty
					$KNIGHT_MAKER$.dynasty = { dynasty_prestige_level = 10 } #Legendary
				}
			}
			add = 175
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					prestige_level >= 4
				}
			}
			add = 100
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					OR = {
						has_council_position = kingsguard_1
						has_council_position = kingsguard_2
						has_council_position = kingsguard_3
						has_council_position = kingsguard_4
						has_council_position = kingsguard_5
						has_council_position = kingsguard_6
					}
				}
			}
			add = 25
		}
		if = {
			limit = {
				$KNIGHT_MAKER$ = {
					has_council_position = kingsguard_lord_commander
				}
			}
			add = 50
		}
		if = {
			limit = {
				$KNIGHT_TO_BE$ = {
					is_close_family_of = $KNIGHT_MAKER$
				}
			}
			add = -25 #AGOT REVIEW - Too harsh?
		}
		if = { #If they are an immediate heir to an EMPIRE tier realm
			limit = {
				$KNIGHT_TO_BE$ = {
					any_heir_title = {
						tier >= tier_empire
						place_in_line_of_succession = {
							target = prev
							value <= 3
						}
					}
				}
			}
			add = 30 #Prestigious to knight the immediate royal family
		}
		if = {
			limit = {
				$KNIGHT_TO_BE$ = {
					any_heir_title = {
						tier = tier_kingdom
						place_in_line_of_succession = {
							target = prev
							value <= 3
						}
					}
				}
			}
			add = 25 #Prestigious to knight the heirs of the lord paramounticies
		}
		if = {
			limit = {
				$KNIGHT_TO_BE$ = {
					is_landed = yes
					highest_held_title_tier > tier_barony
				}
			}
			add = 5 #Knighting a lord will be prestigious to the knight maker, but not very
		}
	}

}

agot_offer_squire_interaction_effect = {
	scope:knight = {
		set_relation_agot_squire = scope:squire
		create_character_memory = {
			type = agot_got_squire
			participants = {
				squire = scope:squire
			}
		}
	}
	scope:squire = {
		#Set relation and move character
		#show_as_tooltip = { set_relation_agot_knight = scope:knight }
		add_trait = squire
		scope:knight = {
			save_scope_as = my_knight
		}

		trigger_event = agot_knighthood.0199

		create_character_memory = {
			type = agot_became_squire
			participants = {
				knight = scope:knight
			}
		}

		if = {
			limit = {
				has_character_flag = agot_knighthood_knightless_squire_flag
			}
			remove_character_flag = agot_knighthood_knightless_squire_flag
		}

		if = {
			limit = {
				scope:knight = { is_landed = yes }
				scope:squire = { is_landed = no }
				NOT = { # If they have a guardian they will not move
					scope:squire = {
							any_relation = {
								type = guardian
							}
						}
				}
				NOT = {
					scope:knight = scope:squire.host
				}
			}
			visit_court_of = scope:knight
		}
		else_if = {
			limit = {
				scope:knight = { is_landed = no }
				scope:squire = { is_landed = yes }
				NOT = {
					scope:knight = {
						has_trait = kingsguard
					}
				}
				NOT = {
					scope:squire = scope:knight.host
				}
			}
			scope:knight = {
				visit_court_of = scope:squire
			}
		}
		else_if = {
			limit = {
				scope:knight = { is_landed = no }
				scope:squire = {
					is_landed = no
					any_relation = {
						type = guardian
					}
				}
				NOT = {
					scope:knight = {
						has_trait = kingsguard
					}
				}
				NOT = {
					scope:knight.host = scope:squire.host
				}
			}
			scope:knight = {
				visit_court_of = scope:squire.host
			}
		}
		else_if = {
			limit = {
				scope:knight = { is_landed = no }
				scope:squire = { is_landed = no }
				NOT = { # If they have a guardian they will not move
					scope:squire = {
							any_relation = {
								type = guardian
							}
						}
				}
				NOT = {
					scope:knight.host = scope:squire.host
				}
			}
			visit_court_of = scope:knight.host
		}
	}

	#Opinions
	#guardian_add_opinion_effect = { GUARDIAN = scope:knight WARD_LIEGE = scope:squire_liege WARD = scope:squire }

	scope:knight = {
		add_opinion = {
			target = scope:squire
			modifier = became_my_squire_opinion
			opinion = 25
		}
	}

	scope:squire = {
		add_opinion = {
			target = scope:knight
			modifier = made_me_squire_opinion
			opinion = 25
		}
	}

	scope:actor = {
		if = {
			limit = { scope:hook = yes }
			use_hook = scope:recipient
		}

		stress_impact = {
			paranoid = minor_stress_impact_gain
		}
	}
}

agot_offer_knight_education_interaction_effect = {
	scope:knight = {
		set_relation_agot_squire = scope:squire
		create_character_memory = {
			type = agot_got_squire
			participants = {
				squire = scope:squire
			}
		}
	}
	scope:squire = {
		show_as_tooltip = { set_relation_agot_knight = scope:knight }
		add_trait = squire
		scope:knight = {
			save_scope_as = my_knight
		}

		trigger_event = agot_knighthood.0199

		create_character_memory = {
			type = agot_became_squire
			participants = {
				knight = scope:knight
			}
		}

		if = {
			limit = {
				has_character_flag = agot_knighthood_knightless_squire_flag
			}
			remove_character_flag = agot_knighthood_knightless_squire_flag
		}

		if = {
			limit = {
				scope:knight = { is_landed = yes }
				scope:squire = { is_landed = no }
				NOT = { # If they have a guardian they will not move
				scope:squire = {
						any_relation = {
							type = guardian
						}
					}
				}
				NOT = {
					scope:knight = scope:squire.host
				}
			}
			visit_court_of = scope:knight
		}
		else_if = {
			limit = {
				scope:knight = { is_landed = no }
				scope:squire = { is_landed = yes }
				NOT = {
					scope:squire = scope:knight.host
				}
			}
			scope:knight = {
				visit_court_of = scope:squire
			}
		}
		else_if = {
			limit = {
				scope:knight = { is_landed = no }
				scope:squire = {
					is_landed = no
					any_relation = {
						type = guardian
					}
				}
				NOT = {
					scope:knight.host = scope:squire.host
				}
			}
			scope:knight = {
				visit_court_of = scope:squire.host
			}
		}
		else_if = {
			limit = {
				scope:knight = { is_landed = no }
				scope:squire = { is_landed = no }
				exists = scope:knight.host
				exists = scope:squire.host
				NOT = {
					scope:knight.host = scope:squire.host
				}
			}
			visit_court_of = scope:knight.host
		}

	}


	#Opinions
	#guardian_add_opinion_effect = { GUARDIAN = scope:guardian WARD_LIEGE = scope:ward_liege WARD = scope:ward }

	scope:actor = {
		if = {
			limit = { scope:hook = yes }
			use_hook = scope:recipient
		}

		stress_impact = {
			paranoid = minor_stress_impact_gain
		}
	}
}

agot_set_squire_effect = {
	$KNIGHT$ = {
		set_relation_agot_squire = $SQUIRE$
		create_character_memory = {
			type = agot_got_squire
			participants = {
				squire = $SQUIRE$
			}
		}
	}
	$SQUIRE$ = {
		add_trait = squire
		$KNIGHT$ = {
			save_scope_as = my_knight
		}

		trigger_event = agot_knighthood.0199

		create_character_memory = {
			type = agot_became_squire
			participants = {
				knight = $KNIGHT$
			}
		}

		if = {
			limit = {
				has_character_flag = agot_knighthood_knightless_squire_flag
			}
			remove_character_flag = agot_knighthood_knightless_squire_flag
		}

		if = {
			limit = {
				$KNIGHT$ = { is_landed = yes }
				$SQUIRE$ = { is_landed = no }
				NOT = { # If they have a guardian they will not move
					$SQUIRE$ = {
						any_relation = {
							type = guardian
						}
					}
				}
				NOT = {
					$KNIGHT$ = scope:squire.host
				}
			}
			visit_court_of = $KNIGHT$
		}
		else_if = {
			limit = {
				$KNIGHT$ = { is_landed = no }
				$SQUIRE$ = { is_landed = yes }
				NOT = {
					$SQUIRE$ = $KNIGHT$.host
				}
			}
			$KNIGHT$ = {
				visit_court_of = $SQUIRE$
			}
		}
		else_if = {
			limit = {
				$KNIGHT$ = { is_landed = no }
				$SQUIRE$ = {
					is_landed = no
					any_relation = {
						type = guardian
					}
				}
				NOT = {
					$KNIGHT$.host = $SQUIRE$.host
				}
			}
			$KNIGHT$ = {
				visit_court_of = $SQUIRE$.host
			}
		}
		else_if = {
			limit = {
				$KNIGHT$ = { is_landed = no }
				$SQUIRE$ = { is_landed = no }
				NOT = {
					$KNIGHT$.host = $SQUIRE$.host
				}
			}
			visit_court_of = $KNIGHT$.host
		}
	}
}

agot_strip_knighthood_as_punishment_effect = {
	$STRIPPER$ = {
		create_character_memory = {
			type = agot_stripped_knighthood
			participants = {
				knight = scope:recipient
			}
		}
	}
	$KNIGHT$ = {
		# Remove knight trait
		if = {
			limit = {
				has_trait = knight
			}
			remove_trait = knight
		} else_if = {
			limit = {
				has_trait_xp = {
					trait = squire
					track = knight
					value >= 100
				}
			}
			remove_trait = squire
		}
		# Piety Penalty
		if = {
			limit = {
				faith = {
					has_doctrine = tenet_knighthood
				}
			}
			add_piety = major_piety_loss
		}
		# Remove Squire Relations
		if = {
			limit = {
				any_relation = {
					type = agot_squire
				}
			}
			every_relation = {
				type = agot_squire
				remove_relation_agot_knight = $KNIGHT$
				add_character_flag = agot_knighthood_was_removed_as_a_squire_flag
			}
		}
		add_prestige = major_prestige_loss
		create_character_memory = {
			type = agot_was_stripped_of_knighthood
			participants = {
				stripper = scope:actor
			}
		}
		add_character_flag = cannot_be_knighted
		add_opinion = {
			target = $STRIPPER$
			modifier = stripped_my_knighthood
			opinion = -50
		}
	}
}

################################
### TOURNAMENT PRIZE EFFECTS ###
################################

agot_tournament_reward_knighthood_prize = {
	du_knight_tree_se = { ACTOR = $HOST$ RECIPIENT = $WINNER$ }
	$WINNER$ = {
		agot_become_a_knight_effect = yes
		create_character_memory = {
			type = agot_was_knighted_as_tourney_prize
			participants = {
				knight = $HOST$
			}
		}
	}
	$HOST$ = {
		create_character_memory = {
			type = agot_knighted_someone_as_tourney_prize
			participants = {
				squire = $WINNER$
			}
		}
	}
}